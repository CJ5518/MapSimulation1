//By Carson Rueber
using UnityEngine;
using System.Collections.Generic;
using System.IO;

//Loads the passenger data matrix generated by lua
//Should consider turning this into a static thing
public class AirportData {
	private TravelInfo[,] data;
	public Dictionary<string, int> lookupTable;

	//Contains travel info for an aiport to another airport
	public struct TravelInfo {
		public int distance;
		public int personsPerYear;

		public TravelInfo(int distance, int personsPerYear) {
			this.distance = distance;
			this.personsPerYear = personsPerYear;
		}
	}

	public AirportData() {
		init();
	}

	public TravelInfo getInfo(string origin, string dest) {
		try {
			int originInt = lookupTable[origin];
			int destInt = lookupTable[dest];
			return data[originInt, destInt];
		}
		catch {
			return new TravelInfo(0,0);
		}
	}

	public int getIdFromCode(string code) {
		return lookupTable[code];
	}

	public void init() {
		TextReader textReader = File.OpenText(DataHandler.aiportMatrixFilepath);
		string[] firstLineBits = textReader.ReadLine().Split(' ');

		data = new TravelInfo[firstLineBits.Length - 1, firstLineBits.Length - 1];
		lookupTable = new Dictionary<string, int>(firstLineBits.Length - 1);

		//Set the 3 letter code to point to an index from 0 - whatever
		for (int q = 1; q < firstLineBits.Length; q++) {
			lookupTable[firstLineBits[q]] = q - 1;
		}

		//Read in personsPerYear
		while (true) {
			string line = textReader.ReadLine();
			if (line == null) break;
			string[] lineBits = line.Split(' ');
			string originCode = lineBits[0];
			int originInt = lookupTable[originCode];
			for (int q = 1; q < lineBits.Length; q++) {
				string destCode = firstLineBits[q];
				int value = int.Parse(lineBits[q]);
				
				data[originInt, lookupTable[destCode]].personsPerYear = value;
			}
		}
		//Read in distance, there's got to be a better way though
		textReader = File.OpenText(DataHandler.aiportDistanceMatrixFilepath);
		textReader.ReadLine();

		while (true) {
			string line = textReader.ReadLine();
			if (line == null) break;
			string[] lineBits = line.Split(' ');
			string originCode = lineBits[0];
			int originInt = lookupTable[originCode];
			for (int q = 1; q < lineBits.Length; q++) {
				string destCode = firstLineBits[q];
				int value = int.Parse(lineBits[q]);
				
				//Legit the only different line in this loop
				data[originInt, lookupTable[destCode]].distance = value;
			}
		}
	}
}